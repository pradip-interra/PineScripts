//@version=5
indicator(title="Price Action in action", shorttitle="Price-Action", format=format.price, precision=2, overlay=true)

// RSI based support-resistance inputs
rsiLen = input.int(defval=14, minval=1, title="RSI Length", group="RSI Settings")
rsiOBLimit = input.float(defval=70.0, minval=1.0, title="Overbought threshold", group="RSI Settings")
rsiOSLimit = input.float(defval=30.0, minval=1.0, title="Oversold threshold", group="RSI Settings")
extendTrendlines = input.bool(defval=false, title="Extend support/resistance lines to right", group="Trendline")
defaultTrendlineLength = input.int(defval=20, minval=1, title="Defauft support/resistance lines length", group="Trendline")
supportLineColor = input.color(defval=color.green, title="Support Line color", group="Trendline")
lineStyleOption = input.string(defval="solid (─)", title="Support/Resistance Lines Style", options=["solid (─)", "dotted (┈)", "dashed (╌)"])
resistanceLineColor = input.color(defval=color.red, title="Resistance Line color", group="Trendline")

// Candlestick Inputs
OnBarClosing = input.bool(defval=true, title="Candlestick pattern detection only after bar closing", tooltip="The candlestick will be drawn only after barstate.isconfirmed. Default: True")
DojiSize = input.float(defval=0.1, minval=0.01, step=0.01, maxval=1.0, title="Doji size", tooltip="How thin the body will be compared to the whole candle high-low. Default is 10%.")
DojiGravestoneDragonFlySize = input.float(defval=0.2, minval=0.01, step=0.01, maxval=1.0, title="GraveStone/Dragonfly size", tooltip="How close the Doji is to the high (Dragonfly) or low (Gravestone) of the candle, default 20%.")
MarubozoSize = input.float(defval=0.9, minval=0.0, step=0.01, title="Marubozo Threshold", tooltip="How much the candle body will be considered as marubozo compared to the whole candle size. Default: 90%.")
HammerBodySize = input.float(group="Hammer", defval=0.2, step=0.01, minval=0.01, maxval=1.0, title="Hammer Body Size", tooltip="How thin the Hammer body will be.Default is 20%.")
HammerBodyPlacement = input.float(group="Hammer", defval=0.2, step=0.01, minval=0.01, maxval=1.0, title="Hammer Body Placement", tooltip="How below (or above) from high (or low) it will be placed. Default is 20%.")
SpinningTopRangeToBodyRatio = input.int(defval=3, minval=1, step=1, maxval=10, title="SpinningTop", tooltip="The ratio of Candle's range to body. Default is 3:1.")
StrictEngulf = input.bool(defval=true, title="Strict Engulfing", tooltip="For Strict mode, the whole previous candle including wicks will be engulfed inside the body part of the current big candle. For non-strict mode, the current candle just engulfs the previous candle, possibly by wicks. Default: Strict")
StrictInsideCandle = input.bool(defval=true, title="Strict Inside Candle(Harami)", tooltip="For Strict mode, the whole current candle including wicks will be inside the body part of the previous big candle. For non-strict mode, the current candle just inside the previous candle, possibly by wicks. Default: Strict")
KickerGap = input.int(defval=1, step=1, minval=0, maxval=100, title="Kicker Gap (in percent)", tooltip="How much Gap Up or Gap Down the current candle compared to previous candle, in percentage. Default: 1 %.")
TweezerGap = input.int(defval=10, step=1, minval=0, title="Tweezer Gap (in points)", tooltip="In Tweezer Top/Bottom, the high or low should be same. However that seldom happens. This flag is to provide the tolerance limit, in points. Default: 10 points.")


lineStyle = lineStyleOption == "dotted (┈)" ? line.style_dotted :
     lineStyleOption == "dashed (╌)" ? line.style_dashed :
         line.style_solid


/////// Main code
rsi = ta.rsi(close, rsiLen)

//////////////////////  Oversold (OS) region handling
var float[] rsiOSRsiValues = array.new_float(0)
var float[] rsiOSLowPrices = array.new_float(0)
var int[] OSRegionBarIndices = array.new_int(0)
var int rsiOSRegionEntryBarIndex = na
var int rsiOSRegionExitBarIndex = na

if ((ta.crossunder(rsi, rsiOSLimit) or rsi < rsiOSLimit) and barstate.isconfirmed)
    // Is inside the RSI OS region, keep on recording the RSI value and price on the respective arrays
    rsiOSRegionEntryBarIndex := bar_index
    array.push(rsiOSRsiValues, rsi)
    array.push(rsiOSLowPrices, low)
    array.push(OSRegionBarIndices, bar_index)

if (ta.crossover(rsi, rsiOSLimit) and (not na(rsiOSRegionEntryBarIndex)) and barstate.isconfirmed)
    // Now RSI comes up from the OS region. So it's good time to do the calculation. Which calculation?
    // - Find out the lowest RSI value from the RSI array
    // - Get the corresponding low price from the price array
    // - Get the corresponding bar_index from bar_index array
    // - Draw the demand/support line on that price
    rsiOSRegionExitBarIndex := bar_index
    minRsi = array.min(rsiOSRsiValues)
    minRsiIndex = array.indexof(rsiOSRsiValues, minRsi)
    minPrice = array.get(rsiOSLowPrices, minRsiIndex)
    minPriceBarIndex = array.get(OSRegionBarIndices, minRsiIndex)
    supportLine = line.new(minPriceBarIndex, minPrice, minPriceBarIndex+defaultTrendlineLength, minPrice, extend=extendTrendlines ? extend.right : extend.none, color=supportLineColor, width=2, style=lineStyle)
    // Reset action for re-entry
    rsiOSRegionEntryBarIndex := na
    rsiOSRegionExitBarIndex := na
    array.clear(rsiOSRsiValues)
    array.clear(rsiOSLowPrices)
    array.clear(OSRegionBarIndices)




//////////////////////  Overbought (OB) region handling
var float[] rsiOBRsiValues = array.new_float(0)
var float[] rsiOBHighPrices = array.new_float(0)
var int[] OBRegionBarIndices = array.new_int(0)
var int rsiOBRegionEntryBarIndex = na
var int rsiOBRegionExitBarIndex = na

if ((ta.crossover(rsi, rsiOBLimit) or rsi > rsiOBLimit) and barstate.isconfirmed)
    // Is inside the RSI OB region, keep on recording the RSI value and price on the respective arrays
    rsiOBRegionEntryBarIndex := bar_index
    array.push(rsiOBRsiValues, rsi)
    array.push(rsiOBHighPrices, high)
    array.push(OBRegionBarIndices, bar_index)

if (ta.crossunder(rsi, rsiOBLimit) and (not na(rsiOBRegionEntryBarIndex)) and barstate.isconfirmed)
    // Now RSI comes down from the OB region. So it's good time to do the calculation. Which calculation?
    // - Find out the highest RSI value from the RSI array
    // - Get the corresponding high price from the price array
    // - Get the corresponding bar_index from bar_index array
    // - Draw the demand/support line on that price
    rsiOBRegionExitBarIndex := bar_index
    maxRsi = array.max(rsiOBRsiValues)
    maxRsiIndex = array.indexof(rsiOBRsiValues, maxRsi)
    maxPrice = array.get(rsiOBHighPrices, maxRsiIndex)
    maxPriceBarIndex = array.get(OBRegionBarIndices, maxRsiIndex)
    resistanceLine = line.new(maxPriceBarIndex, maxPrice, maxPriceBarIndex+defaultTrendlineLength, maxPrice, extend=extendTrendlines ? extend.right : extend.none, color=resistanceLineColor, width=2, style=line.style_solid)
    // Reset action for re-entry
    rsiOBRegionEntryBarIndex := na
    rsiOBRegionExitBarIndex := na
    array.clear(rsiOBRsiValues)
    array.clear(rsiOBHighPrices)
    array.clear(OBRegionBarIndices)




///////////////////////////////////////////////// Candlestick pattern starts /////////////////////////////////////////////////////////////////////

// Utils
green(open, close) => close > open ? true : false
red(open, close) => close < open ? true : false
body(open, close) => math.abs(open - close)
lowerwick = green(open, close) ? open - low : close - low
upperwick = green(open, close) ? high - close : high - open
crange = high - low
crangep = high[1] - low[1] // previous candle's candle-range
bullish = close > open ? true : false
bearish = close < open ? true : false
oc = OnBarClosing ? barstate.isconfirmed : true
// Single Candle Patterns ///////////////////////////////////////////////////////////////////////////////////////
// Doji Logic
doji(open, close, high, low) => body(open, close) <= crange * DojiSize
gravestone(o, c, h, l) => doji(o, c, h, l) and lowerwick / crange <= DojiGravestoneDragonFlySize
dragonfly(o, c, h, l) => doji(o, c, h, l) and upperwick / crange <= DojiGravestoneDragonFlySize
normaldoji(o, c, h, l) => doji(o, c, h, l) and (not gravestone(o, c, h, l)) and (not dragonfly(o, c, h, l))
plotchar(oc and normaldoji(open, close, high, low), title='Normal Doji', text='Doji', color=color.gray, display=display.none)
plotchar(oc and gravestone(open, close, high, low), title='GraveStone Doji', text='GS\nDoji', color=color.gray, display=display.none)
plotchar(oc and dragonfly(open, close, high, low), title='DragonFly Doji', text='DF\nDoji', color=color.gray, display=display.none)

// Marubozo Logic
marubozo(o, c, h, l) => body(o, c) / crange >= MarubozoSize
plotshape(oc and marubozo(open, close, high, low), title='Marubozo', text='Marubozo', location=location.abovebar, style=shape.triangledown, color=color.blue)

// Hammer & Inverted Hammer (Pinbar)
hammer(o, c, h, l, inverted = false) => (not doji(o,c,h,l)) and (body(o, c) <= crange * HammerBodySize) and ((inverted ? lowerwick : upperwick) / crange <= HammerBodyPlacement)
plotshape(oc and hammer(open, close, high, low), title='Hammer', text='Hammer', location=location.belowbar, style=shape.arrowup, color=color.green, textcolor=color.green)
plotshape(oc and hammer(open, close, high, low, true), title='I-Hammer\n/Pinbar', text='I-Hammer\n/Pinbar', location=location.abovebar, style=shape.arrowdown, color=color.red, textcolor=color.red)

// Spinning Top
wickratio = upperwick < lowerwick ? upperwick / lowerwick : lowerwick / upperwick
spinner(o, c, h, l) => (not doji(o,c,h,l)) and (crange / body(o, c) >= SpinningTopRangeToBodyRatio) and (wickratio >= 0.9)
plotshape(oc and spinner(open, close, high, low), title='Spinner', text='Spinner', location=location.belowbar, style=shape.cross, color=color.maroon, textcolor=color.maroon)


// Two Candles Patterns ///////////////////////////////////////////////////////////////////////////////////////
lowest = math.min(low,low[1])
highest = math.max(high,high[1])

// Engulfing Pattern
// op: Open Prev, cp: Close Prev .. so on
bullish_engulfing(op, cp, hp, lp, o, c, h, l) => red(op, cp) and green(o, c) and (StrictEngulf ? (c > hp and o < lp) : (h > hp and l < lp))
bearish_engulfing(op, cp, hp, lp, o, c, h, l) => green(op, cp) and red(o, c) and (StrictEngulf ? (o > hp and c < lp) : (h > hp and l < lp))
bullish_engulf_data = bullish_engulfing(open[1], close[1], high[1], low[1], open, close, high, low)
bearish_engulf_data = bearish_engulfing(open[1], close[1], high[1], low[1], open, close, high, low)
plotshape(oc and bullish_engulf_data, title='Bull-Engulf', text='Bull-Engulf', location=location.belowbar, style=shape.triangleup, color=color.green, textcolor=color.green)
if (bullish_engulf_data and barstate.isconfirmed)
    box.new(bar_index-1, highest, bar_index, lowest, border_color=color.green, border_style=line.style_dotted, border_width=2, bgcolor=color.new(color.white, 100))
plotshape(bearish_engulf_data, title='Bear-Engulf', text='Bear-Engulf', location=location.abovebar, style=shape.triangledown, color=color.red, textcolor=color.red)
if (bearish_engulf_data and barstate.isconfirmed)
    box.new(bar_index-1, highest, bar_index, lowest, border_color=color.red, border_style=line.style_dotted, border_width=2, bgcolor=color.new(color.white, 100))


//// Piercing and Dark Cloud Cover Pattern

// These patterns are similar to the engulfing patten. The differences are (ditto from Zerodha Versity):
// The piercing pattern is very similar to the bullish engulfing pattern with a minor variation. In a bullish engulfing pattern, the P2’s green candle engulfs P1’s red candle. 
// However in a piercing pattern P2’s green candle partially engulfs P1’s red candle. However, engulfing should be between 50% and less than 100%. 
// For example, if P1’s range (Open-Close) is 12, P2’s range should be at least 6 or higher,r but below 12.
prev_candle_middle = (open[1] + close[1]) / 2
bullish_piercing(op, cp, hp, lp, o, c, h, l) => (not doji(op,cp,hp,lp)) and (not doji(o,c,h,l)) and red(op, cp) and green(o, c) and (o <= lp and c > prev_candle_middle and c < op) //
bullish_piering_data = bullish_piercing(open[1], close[1], high[1], low[1], open, close, high, low)
plotshape(oc and bullish_piering_data, title='Piercing', text='Piercing', location=location.belowbar, style=shape.triangleup, color=color.green, textcolor=color.green)
if (bullish_piering_data and barstate.isconfirmed)
    box.new(bar_index-1, highest, bar_index, lowest, border_color=color.green, border_style=line.style_dotted, border_width=2, bgcolor=color.new(color.white, 100))


// Dark Cloud Cover
// Definition (from Zerodha Versity):
// The dark cloud cover is very similar to the bearish engulfing pattern with a minor variation. 
// In a bearish engulfing pattern the red candle on P2 engulfs P1’s green candle. 
// However, in a dark cloud cover, the red candle on P2 engulfs about 50 to 100% of P1’s blue candle.
dark_cloud_cover(op, cp, hp, lp, o, c, h, l) => (not doji(op,cp,hp,lp)) and (not doji(o,c,h,l)) and green(op, cp) and red(o, c) and (o >= hp and c < prev_candle_middle and c > op)
ddc_data = dark_cloud_cover(open[1], close[1], high[1], low[1], open, close, high, low)
plotshape(oc and ddc_data, title='Dark Cloud Cover', text='DCC', location=location.abovebar, style=shape.triangledown, color=color.red, textcolor=color.red)
if (ddc_data and barstate.isconfirmed)
    box.new(bar_index-1, highest, bar_index, lowest, border_color=color.red, border_style=line.style_dotted, border_width=2, bgcolor=color.new(color.white, 100))


// Inside Candle (Harami) Pattern
// op: Open Prev, cp: Close Prev .. so on
bullish_inside_candle(op, cp, hp, lp, o, c, h, l) => red(op, cp) and green(o, c) and (StrictInsideCandle ? (op > h and cp < l) : (hp > h and lp < l))
bearish_inside_candle(op, cp, hp, lp, o, c, h, l) => green(op, cp) and red(o, c) and (StrictInsideCandle ? (cp > h and op < l) : (hp > h and lp < l))
bullish_inside_data = bullish_inside_candle(open[1], close[1], high[1], low[1], open, close, high, low)
bearish_inside_data = bearish_inside_candle(open[1], close[1], high[1], low[1], open, close, high, low)
plotshape(oc and bullish_inside_data, title='Bull-IC', text='Bull-IC', location=location.belowbar, style=shape.triangleup, color=color.green, textcolor=color.green)
if (bullish_inside_data and barstate.isconfirmed)
    box.new(bar_index-1, highest, bar_index, lowest, border_color=color.green, border_style=line.style_dotted, border_width=2, bgcolor=color.new(color.white, 100))
plotshape(oc and bearish_inside_data, title='Bear-IC', text='Bear-IC', location=location.abovebar, style=shape.triangledown, color=color.red, textcolor=color.red)
if (bearish_inside_data and barstate.isconfirmed)
    box.new(bar_index-1, highest, bar_index, lowest, border_color=color.red, border_style=line.style_dotted, border_width=2, bgcolor=color.new(color.white, 100))


// Bullish and Bearish Kicker

bullish_kicker(op, cp, o, c) => red(op, cp) and green(o, c) and (o > (op * (1 + (KickerGap / 100))))
bullish_kicker_data = bullish_kicker(open[1], close[1], open, close)
plotshape(oc and bullish_kicker_data, title='Bullish Kicker', text='Bull\nKicker', location=location.belowbar, style=shape.arrowup, color=color.green, textcolor=color.green)
if (bullish_kicker_data and barstate.isconfirmed)
    box.new(bar_index-1, highest, bar_index, lowest, border_color=color.green, border_style=line.style_dotted, border_width=2, bgcolor=color.new(color.white, 100))

bearish_kicker(op, cp, o, c) => green(op, cp) and red(o, c) and (o < (op * (1 - (KickerGap / 100))))
bearish_kicker_data = bearish_kicker(open[1], close[1], open, close)
plotshape(oc and bearish_kicker_data, title='Bearish Kicker', text='Bear\nKicker', location=location.abovebar, style=shape.arrowdown, color=color.red, textcolor=color.red)
if (bearish_kicker_data and barstate.isconfirmed)
    box.new(bar_index-1, highest, bar_index, lowest, border_color=color.red, border_style=line.style_dotted, border_width=2, bgcolor=color.new(color.white, 100))


// Tweezers Top and Bottom
tweezer_top(op, cp, hp, lp, o, c, h, l) => (not doji(op,cp,hp,lp)) and (not doji(o,c,h,l)) and green(op, cp) and red(o, c) and (math.abs(crange-crangep) <= TweezerGap) and (math.abs(h-hp) <= TweezerGap)
tweezer_top_data = tweezer_top(open[1], close[1], high[1], low[1], open, close, high, low)
plotshape(oc and tweezer_top_data, title='Tweezer Top', text='Bear\nTweezer', location=location.abovebar, style=shape.arrowdown, color=color.red, textcolor=color.red)
if (tweezer_top_data and barstate.isconfirmed)
    box.new(bar_index-1, highest, bar_index, lowest, border_color=color.red, border_style=line.style_dotted, border_width=2, bgcolor=color.new(color.white, 100))

tweezer_bottom(op, cp, hp, lp, o, c, h, l) => (not doji(op,cp,hp,lp)) and (not doji(o,c,h,l)) and red(op, cp) and green(o, c) and (math.abs(crange-crangep) <= TweezerGap) and (math.abs(l-lp) <= TweezerGap)
tweezer_bottom_data = tweezer_bottom(open[1], close[1], high[1], low[1], open, close, high, low)
plotshape(oc and tweezer_bottom_data, title='Tweezer Bottom', text='Bull\nTweezer', location=location.belowbar, style=shape.arrowup, color=color.green, textcolor=color.green)
if (tweezer_bottom_data and barstate.isconfirmed)
    box.new(bar_index-1, highest, bar_index, lowest, border_color=color.green, border_style=line.style_dotted, border_width=2, bgcolor=color.new(color.white, 100))



////// Tripple CandleStick Pattern

// Morning Star (ms_)
// Explanation (from https://zerodha.com/varsity/chapter/multiple-candlestick-patterns-part-3)
ms_day1 = red(open[2],close[2]) and (not doji(open[2], close[2], high[2], low[2]))
ms_day2 = (open[1] < close[2]) and (doji(open[1], close[1], high[1], low[1]) or spinner(open[1], close[1], high[1], low[1]))
ms_day3 = (green(open[1],close[1]) ? open > close[1] : open > open[1]) and green(open, close) and (close > open[2])
ms_cond = ms_day1 and ms_day2 and ms_day3
plotshape(oc and ms_cond, title='Morning-Star', text='Morning-Star', location=location.belowbar, style=shape.triangleup, color=color.green, textcolor=color.green)
lowestp = math.min(low,low[1],low[2])
highestp = math.max(high,high[1],high[2])
if (ms_cond and barstate.isconfirmed)
    box.new(bar_index-2, highestp, bar_index, lowestp, border_color=color.green, border_style=line.style_dashed, border_width=2, bgcolor=color.new(color.white, 100))

// Evening Star (es_)
// Explanation (from https://zerodha.com/varsity/chapter/multiple-candlestick-patterns-part-3)
es_day1 = green(open[2],close[2]) and (not doji(open[2], close[2], high[2], low[2]))
es_day2 = (open[1] > close[2]) and (doji(open[1], close[1], high[1], low[1]) or spinner(open[1], close[1], high[1], low[1]))
es_day3 = (green(open[1],close[1]) ? open < open[1] : open < close[1]) and red(open, close) and (close < open[2])
es_cond = es_day1 and es_day2 and es_day3
plotshape(oc and es_cond, title='Evening-Star', text='Evening-Star', location=location.abovebar, style=shape.triangledown, color=color.red, textcolor=color.red)
if (es_cond and barstate.isconfirmed)
    box.new(bar_index-2, highestp, bar_index, lowestp, border_color=color.red, border_style=line.style_dashed, border_width=2, bgcolor=color.new(color.white, 100))



/////////////////////////////////////////////////////////////////////////////////// RSI Demand Supply, copied from shtcoinr ///////////////////////////////////////////////////////////////
//© shtcoinr, updated to v4 wijth additional zones and settings by Lij_MC
// This one is taken from the (ditto, after modifying the script to PineScript-v5) "RSI Based Automatic Supply and Demand", authored by @shtcoinr in 2019. Awesome work by @shtcoinr.
/////////////////////////////////////////////////////////////////////////////////// RSI Demand Supply, copied from shtcoinr ///////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ShowSD1 = input.bool(false, "Supply Demand Zone", group = "Supply Demand 1", inline = "Supply Demand 1")
ShowSZ1 = input.bool(false, "Support Zone",       group = "Supply Demand 1", inline = "Supply Demand 1")
ShowRZ1 = input.bool(false, "Resistance Zone",    group = "Supply Demand 1", inline = "Supply Demand 1")

RSI1Length = input.int(7, minval=1, title="RSI 1 Length",                                                                            group="Supply Demand 1")
RSI1OBOSIn = input.string(defval="70 / 30", title="OB / OS", options=["70 / 30", "75 / 25", "80 / 20", "85 / 15", "90 / 10", "95 / 5"], group="Supply Demand 1")
NumberOfConfirmationBarsRSI1 = input.int(3, title="Confirmation Bars",                                                               group="Supply Demand 1")

RSI1SDColorIn          = input.color(defval=color.new(color.blue, 85), title="Fill Colors - Supply Demand", group="Supply Demand 1", inline = "Fill 1")
RSI1SupportColorIn     = input.color(color.new(color.lime, 92), "Support",                     group="Supply Demand 1", inline = "Fill 1")
RSI1ResistanceColorIn  = input.color(color.new(color.red,  92), "Resistance",                  group="Supply Demand 1", inline = "Fill 1")


RSI1       = ta.rsi(close, RSI1Length)

RSI1OB = RSI1OBOSIn == "70 / 30" ? 70 : 
   RSI1OBOSIn == "75 / 25" ? 75 : RSI1OBOSIn == "80 / 20" ? 80 : 
   RSI1OBOSIn == "90 / 10" ? 90 : RSI1OBOSIn == "95 / 5" ? 95 : 100
RSI1OS = RSI1OBOSIn == "70 / 30" ? 30 : 
   RSI1OBOSIn == "75 / 25" ? 25 : RSI1OBOSIn == "80 / 20" ? 20 : 
   RSI1OBOSIn == "90 / 10" ? 10 : RSI1OBOSIn == "95 / 5" ? 5 : 0



RSI1incrementer_up   = RSI1 > RSI1OB ? 1 : 0
RSI1incrementer_down = RSI1 < RSI1OS ? 1 : 0
RSI1incrementer_both = RSI1 > RSI1OB or RSI1 < RSI1OS ? 1 : 0


RSI1rsx = 0


if RSI1incrementer_both
    RSI1rsx := nz(RSI1rsx[1], 0) + RSI1incrementer_both
    RSI1rsx
else
    RSI1rsx := 0
    RSI1rsx

RSI1rxH = if RSI1rsx >= NumberOfConfirmationBarsRSI1
    RSI1x = high
    RSI1x
RSI1rxL = if RSI1rsx >= NumberOfConfirmationBarsRSI1
    RSI1y = low
    RSI1y

RSI1rH = fixnan(RSI1rxH)
RSI1rL = fixnan(RSI1rxL)


///////////////////////////////////////////////////////


RSI1rsu = 0


if RSI1incrementer_up
    RSI1rsu := nz(RSI1rsu[1], 0) + RSI1incrementer_up
    RSI1rsu
else
    RSI1rsu := 0
    RSI1rsu


RSI1rssH = if RSI1rsu >= NumberOfConfirmationBarsRSI1
    RSI1x = high
    RSI1x


RSI1rssL = if RSI1rsu >= NumberOfConfirmationBarsRSI1
    RSI1y = low
    RSI1y

RSI1ResistanceZoneHigh = fixnan(RSI1rssH)
RSI1ResistanceZoneLow  = fixnan(RSI1rssL)


////////////////////////////////////////////////////////


RSI1rsd = 0


if RSI1incrementer_down
    RSI1rsd := nz(RSI1rsd[1], 0) + RSI1incrementer_down
    RSI1rsd
else
    RSI1rsd := 0
    RSI1rsd

RSI1rsrH = if RSI1rsd >= NumberOfConfirmationBarsRSI1
    RSI1x = high
    RSI1x

RSI1rsrL = if RSI1rsd >= NumberOfConfirmationBarsRSI1
    RSI1y = low
    RSI1y


RSI1SupportZoneHigh = fixnan(RSI1rsrH)
RSI1SupportZoneLow  = fixnan(RSI1rsrL)


////////////////////////////////////////////////////////

RSI1_ResZoneColor = RSI1ResistanceZoneHigh !=  RSI1ResistanceZoneHigh[1] ?  na : RSI1ResistanceColorIn
RSI1_SupZoneColor = RSI1SupportZoneLow     !=  RSI1SupportZoneLow[1]     ?  na : RSI1SupportColorIn

RSI1SDColor       = RSI1rH != RSI1rH[1]?                                    na : RSI1SDColorIn

////////////////////////////////////////////////////////

RSI1RZHigh = plot(ShowRZ1 ? RSI1ResistanceZoneHigh : na, style=plot.style_cross, title="Resistance Zone - 1 - High", color=RSI1_ResZoneColor, transp=1)
RSI1RZLow  = plot(ShowRZ1 ? RSI1ResistanceZoneLow  : na, style=plot.style_cross, title="Resistance Zone - 1 - Low",  transp=100)
fill(RSI1RZHigh, RSI1RZLow, color=RSI1_ResZoneColor, title="Support Zone - 1 - Fill")

RSI1SZHigh = plot(ShowSZ1 ? RSI1SupportZoneHigh    : na, style=plot.style_cross,    title="Support Zone - 1 - High", transp=100)
RSI1SZLow  = plot(ShowSZ1 ? RSI1SupportZoneLow     : na, style=plot.style_cross,    title="Support Zone - 1 - Low",  transp=100)
fill(RSI1SZHigh, RSI1SZLow, color=RSI1_SupZoneColor, title="Support Zone - 1 - Fill")


PlotRSI1rH = plot(ShowSD1 ? RSI1rH : na,  style=plot.style_cross, linewidth=1, title="Supply Demand - 1 - High")
PlotRSI1rL = plot(ShowSD1 ? RSI1rL : na,  style=plot.style_cross, linewidth=1, title="Supply Demand - 1 - Low")
fill(PlotRSI1rH, PlotRSI1rL, color=RSI1SDColor, title="Supply Demand - 1 - Fill")

////////////////////////////////////////////////////////

PriceInRSI1SDZone     = (close <= RSI1rH) and (close >= RSI1rL) and (RSI1rH == RSI1rH[1])
PriceEntersRSI1SDZone = (PriceInRSI1SDZone and not PriceInRSI1SDZone[1])

alertcondition(PriceEntersRSI1SDZone,   title='Alert - Price Enters S/D Zone 1',    message='Price Enters S/D Zone 1 - RSI S/D')


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


ShowSD2    = input(true,  "Supply Demand Zone", group = "Supply Demand 2", inline = "Supply Demand 2")
ShowSZ2    = input(false, "Support Zone",       group = "Supply Demand 2", inline = "Supply Demand 2")
ShowRZ2    = input(false, "Resistance Zone",    group = "Supply Demand 2", inline = "Supply Demand 2")

RSI2Length  = input.int(14, minval=1, title="RSI 2 Length",                                                                            group="Supply Demand 2")
RSI2OBOSIn  = input.string(defval="70 / 30", title="OB / OS", options=["70 / 30", "75 / 25", "80 / 20", "85 / 15", "90 / 10", "95 / 5"], group="Supply Demand 2")
NumberOfConfirmationBarsRSI2 = input.int(3, title="Confirmation Bars",                                                                group="Supply Demand 2")

RSI2SDColorIn          = input.color(color.new(color.blue, 85), "Fill Colors - Supply Demand", group="Supply Demand 2", inline = "Fill 2")
RSI2SupportColorIn     = input.color(color.new(color.lime, 92), "Support",                     group="Supply Demand 2", inline = "Fill 2")
RSI2ResistanceColorIn  = input.color(color.new(color.red,  92), "Resistance",                  group="Supply Demand 2", inline = "Fill 2")


RSI2       = ta.rsi(close, RSI2Length)

RSI2OB = RSI2OBOSIn == "70 / 30" ? 70 : 
   RSI2OBOSIn == "75 / 25" ? 75 : RSI2OBOSIn == "80 / 20" ? 80 : 
   RSI2OBOSIn == "90 / 10" ? 90 : RSI2OBOSIn == "95 / 5" ? 95 : 100
RSI2OS = RSI2OBOSIn == "70 / 30" ? 30 : 
   RSI2OBOSIn == "75 / 25" ? 25 : RSI2OBOSIn == "80 / 20" ? 20 : 
   RSI2OBOSIn == "90 / 10" ? 10 : RSI2OBOSIn == "95 / 5" ? 5 : 0


RSI2incrementer_up   = RSI2 > RSI2OB ? 1 : 0
RSI2incrementer_down = RSI2 < RSI2OS ? 1 : 0
RSI2incrementer_both = RSI2 > RSI2OB or RSI2 < RSI2OS ? 1 : 0


RSI2rsx = 0


if RSI2incrementer_both
    RSI2rsx := nz(RSI2rsx[1], 0) + RSI2incrementer_both
    RSI2rsx
else
    RSI2rsx = 0
    RSI2rsx

RSI2rxH = if RSI2rsx >= NumberOfConfirmationBarsRSI2
    RSI2x = high
    RSI2x
RSI2rxL = if RSI2rsx >= NumberOfConfirmationBarsRSI2
    RSI2y = low
    RSI2y

RSI2rH = fixnan(RSI2rxH)
RSI2rL = fixnan(RSI2rxL)



///////////////////////////////////////////////////////


RSI2rsu = 0


if RSI2incrementer_up
    RSI2rsu := nz(RSI2rsu[1], 0) + RSI2incrementer_up
    RSI2rsu
else
    RSI2rsu = 0
    RSI2rsu


RSI2rssH = if RSI2rsu >= NumberOfConfirmationBarsRSI2
    RSI2x = high
    RSI2x


RSI2rssL = if RSI2rsu >= NumberOfConfirmationBarsRSI2
    RSI2y = low
    RSI2y

RSI2ResistanceZoneHigh = fixnan(RSI2rssH)
RSI2ResistanceZoneLow  = fixnan(RSI2rssL)


////////////////////////////////////////////////////////


RSI2rsd = 0


if RSI2incrementer_down
    RSI2rsd := nz(RSI2rsd[1], 0) + RSI2incrementer_down
    RSI2rsd
else
    RSI2rsd = 0
    RSI2rsd

RSI2rsrH = if RSI2rsd >= NumberOfConfirmationBarsRSI2
    RSI2x = high
    RSI2x

RSI2rsrL = if RSI2rsd >= NumberOfConfirmationBarsRSI2
    RSI2y = low
    RSI2y


RSI2SupportZoneHigh = fixnan(RSI2rsrH)
RSI2SupportZoneLow  = fixnan(RSI2rsrL)


////////////////////////////////////////////////////////

RSI2_ResZoneColor = RSI2ResistanceZoneHigh !=  RSI2ResistanceZoneHigh[1] ?  na : RSI2ResistanceColorIn
RSI2_SupZoneColor = RSI2SupportZoneLow     !=  RSI2SupportZoneLow[1]     ?  na : RSI2SupportColorIn

RSI2SDColor       = RSI2rH != RSI2rH[1]?                                    na : RSI2SDColorIn

////////////////////////////////////////////////////////


RSI2RZHigh = plot(ShowRZ2 ? RSI2ResistanceZoneHigh : na, style=plot.style_cross, title="Resistance Zone - 2 - High", transp=100)
RSI2RZLow  = plot(ShowRZ2 ? RSI2ResistanceZoneLow  : na, style=plot.style_cross, title="Resistance Zone - 2 - Low",  transp=100)
fill(RSI2RZHigh, RSI2RZLow, color=RSI2_ResZoneColor, title="Support Zone - 2 - Fill")

RSI2SZHigh = plot(ShowSZ2 ? RSI2SupportZoneHigh    : na, style=plot.style_cross,    title="Support Zone - 2 - High", transp=100)
RSI2SZLow  = plot(ShowSZ2 ? RSI2SupportZoneLow     : na, style=plot.style_cross,    title="Support Zone - 2 - Low",  transp=100)
fill(RSI2SZHigh, RSI2SZLow, color=RSI2_SupZoneColor, title="Support Zone - 2 - Fill")


PlotRSI2rH = plot(ShowSD2 ? RSI2rH : na,  style=plot.style_cross, linewidth=1, title="Supply Demand - 2 - High")
PlotRSI2rL = plot(ShowSD2 ? RSI2rL : na,  style=plot.style_cross, linewidth=1, title="Supply Demand - 2 - Low")
fill(PlotRSI2rH, PlotRSI2rL, color=RSI2SDColor, title="Supply Demand - 2 - Fill")

////////////////////////////////////////////////////////

PriceInRSI2SDZone     = (close <= RSI2rH) and (close >= RSI2rL) and (RSI2rH == RSI2rH[1])
PriceEntersRSI2SDZone = (PriceInRSI2SDZone and not PriceInRSI2SDZone[1])

alertcondition(PriceEntersRSI2SDZone,   title='Alert - Price Enters S/D Zone 2',    message='Price Enters S/D Zone 2 - RSI S/D')


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 


ShowSD3    = input(false,  "Supply Demand Zone", group = "Supply Demand 3", inline = "Supply Demand 3")
ShowSZ3    = input(false, "Support Zone",       group = "Supply Demand 3", inline = "Supply Demand 3")
ShowRZ3    = input(false, "Resistance Zone",    group = "Supply Demand 3", inline = "Supply Demand 3")

RSI3Length  = input.int(21,  minval=1, title="RSI 3 Length",                                                                          group="Supply Demand 3")
RSI3OBOSIn  = input.string(defval="70 / 30", title="OB / OS", options=["70 / 30", "75 / 25", "80 / 20", "85 / 15", "90 / 10", "95 / 5"], group="Supply Demand 3")
NumberOfConfirmationBarsRSI3 = input.int(3, title="Confirmation Bars",                                                                group="Supply Demand 3")

RSI3SDColorIn          = input.color(color.new(color.blue, 85), "Fill Colors - Supply Demand", group="Supply Demand 3", inline = "Fill 3")
RSI3SupportColorIn     = input.color(color.new(color.lime, 92), "Support",                     group="Supply Demand 3", inline = "Fill 3")
RSI3ResistanceColorIn  = input.color(color.new(color.red,  92), "Resistance",                  group="Supply Demand 3", inline = "Fill 3")


RSI3       = ta.rsi(close, RSI3Length)

RSI3OB = RSI3OBOSIn == "70 / 30" ? 70 : 
   RSI3OBOSIn == "75 / 25" ? 75 : RSI3OBOSIn == "80 / 20" ? 80 : 
   RSI3OBOSIn == "90 / 10" ? 90 : RSI3OBOSIn == "95 / 5" ? 95 : 100
RSI3OS = RSI3OBOSIn == "70 / 30" ? 30 : 
   RSI3OBOSIn == "75 / 25" ? 25 : RSI3OBOSIn == "80 / 20" ? 20 : 
   RSI3OBOSIn == "90 / 10" ? 10 : RSI3OBOSIn == "95 / 5" ? 5 : 0


RSI3incrementer_up   = RSI3 > RSI3OB ? 1 : 0
RSI3incrementer_down = RSI3 < RSI3OS ? 1 : 0
RSI3incrementer_both = RSI3 > RSI3OB or RSI3 < RSI3OS ? 1 : 0


RSI3rsx = 0


if RSI3incrementer_both
    RSI3rsx := nz(RSI3rsx[1], 0) + RSI3incrementer_both
    RSI3rsx
else
    RSI3rsx = 0
    RSI3rsx

RSI3rxH = if RSI3rsx >= NumberOfConfirmationBarsRSI3
    RSI3x = high
    RSI3x
RSI3rxL = if RSI3rsx >= NumberOfConfirmationBarsRSI3
    RSI3y = low
    RSI3y

RSI3rH = fixnan(RSI3rxH)
RSI3rL = fixnan(RSI3rxL)



///////////////////////////////////////////////////////


RSI3rsu = 0


if RSI3incrementer_up
    RSI3rsu := nz(RSI3rsu[1], 0) + RSI3incrementer_up
    RSI3rsu
else
    RSI3rsu = 0
    RSI3rsu


RSI3rssH = if RSI3rsu >= NumberOfConfirmationBarsRSI3
    RSI3x = high
    RSI3x


RSI3rssL = if RSI3rsu >= NumberOfConfirmationBarsRSI3
    RSI3y = low
    RSI3y

RSI3ResistanceZoneHigh = fixnan(RSI3rssH)
RSI3ResistanceZoneLow  = fixnan(RSI3rssL)


////////////////////////////////////////////////////////


RSI3rsd = 0


if RSI3incrementer_down
    RSI3rsd := nz(RSI3rsd[1], 0) + RSI3incrementer_down
    RSI3rsd
else
    RSI3rsd = 0
    RSI3rsd

RSI3rsrH = if RSI3rsd >= NumberOfConfirmationBarsRSI3
    RSI3x = high
    RSI3x

RSI3rsrL = if RSI3rsd >= NumberOfConfirmationBarsRSI3
    RSI3y = low
    RSI3y


RSI3SupportZoneHigh = fixnan(RSI3rsrH)
RSI3SupportZoneLow  = fixnan(RSI3rsrL)


////////////////////////////////////////////////////////

RSI3_ResZoneColor = RSI3ResistanceZoneHigh !=  RSI3ResistanceZoneHigh[1] ?  na : RSI3ResistanceColorIn
RSI3_SupZoneColor = RSI3SupportZoneLow     !=  RSI3SupportZoneLow[1]     ?  na : RSI3SupportColorIn

RSI3SDColor       = RSI3rH != RSI3rH[1]?                                    na : RSI3SDColorIn

////////////////////////////////////////////////////////


RSI3RZHigh = plot(ShowRZ3 ? RSI3ResistanceZoneHigh : na, style=plot.style_cross, title="Resistance Zone - 3 - High", transp=100)
RSI3RZLow  = plot(ShowRZ3 ? RSI3ResistanceZoneLow  : na, style=plot.style_cross, title="Resistance Zone - 3 - Low",  transp=100)
fill(RSI3RZHigh, RSI3RZLow, color=RSI3_ResZoneColor, title="Support Zone - 3 - Fill")

RSI3SZHigh = plot(ShowSZ3 ? RSI3SupportZoneHigh    : na, style=plot.style_cross,    title="Support Zone - 3 - High", transp=100)
RSI3SZLow  = plot(ShowSZ3 ? RSI3SupportZoneLow     : na, style=plot.style_cross,    title="Support Zone - 3 - Low",  transp=100)
fill(RSI3SZHigh, RSI3SZLow, color=RSI3_SupZoneColor, title="Support Zone - 3 - Fill")


PlotRSI3rH = plot(ShowSD3 ? RSI3rH : na,  style=plot.style_cross, linewidth=1, title="Supply Demand - 3 - High")
PlotRSI3rL = plot(ShowSD3 ? RSI3rL : na,  style=plot.style_cross, linewidth=1, title="Supply Demand - 3 - Low")
fill(PlotRSI3rH, PlotRSI3rL, color=RSI3SDColor, title="Supply Demand - 3 - Fill")

////////////////////////////////////////////////////////

PriceInRSI3SDZone     = (close <= RSI3rH) and (close >= RSI3rL) and (RSI3rH == RSI3rH[1])
PriceEntersRSI3SDZone = (PriceInRSI3SDZone and not PriceInRSI3SDZone[1])

alertcondition(PriceEntersRSI3SDZone,   title='Alert - Price Enters S/D Zone 3',    message='Price Enters S/D Zone 3 - RSI S/D')


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


ShowSD4    = input.bool(false,  "Supply Demand Zone", group = "Supply Demand 4", inline = "Supply Demand 4")
ShowSZ4    = input.bool(false, "Support Zone",       group = "Supply Demand 4", inline = "Supply Demand 4")
ShowRZ4    = input.bool(false, "Resistance Zone",    group = "Supply Demand 4", inline = "Supply Demand 4")

RSI4Length  = input.int(28,  minval=1, title="RSI 4 Length",                                                                          group="Supply Demand 4")
RSI4OBOSIn  = input.string(defval="70 / 30", title="OB / OS", options=["70 / 30", "75 / 25", "80 / 20", "85 / 15", "90 / 10", "95 / 5"], group="Supply Demand 4")
NumberOfConfirmationBarsRSI4 = input.int(3, title="Confirmation Bars",                                                                group="Supply Demand 4")

RSI4SDColorIn          = input.color(color.new(color.blue, 85), "Fill Colors - Supply Demand", group="Supply Demand 4", inline = "Fill 4")
RSI4SupportColorIn     = input.color(color.new(color.lime, 92), "Support",                     group="Supply Demand 4", inline = "Fill 4")
RSI4ResistanceColorIn  = input.color(color.new(color.red,  92), "Resistance",                  group="Supply Demand 4", inline = "Fill 4")


RSI4       = ta.rsi(close, RSI4Length)

RSI4OB = RSI4OBOSIn == "70 / 30" ? 70 : 
   RSI4OBOSIn == "75 / 25" ? 75 : RSI4OBOSIn == "80 / 20" ? 80 : 
   RSI4OBOSIn == "90 / 10" ? 90 : RSI4OBOSIn == "95 / 5" ? 95 : 100
RSI4OS = RSI4OBOSIn == "70 / 30" ? 30 : 
   RSI4OBOSIn == "75 / 25" ? 25 : RSI4OBOSIn == "80 / 20" ? 20 : 
   RSI4OBOSIn == "90 / 10" ? 10 : RSI4OBOSIn == "95 / 5" ? 5 : 0


RSI4incrementer_up   = RSI4 > RSI4OB ? 1 : 0
RSI4incrementer_down = RSI4 < RSI4OS ? 1 : 0
RSI4incrementer_both = RSI4 > RSI4OB or RSI4 < RSI4OS ? 1 : 0


RSI4rsx = 0


if RSI4incrementer_both
    RSI4rsx := nz(RSI4rsx[1], 0) + RSI4incrementer_both
    RSI4rsx
else
    RSI4rsx = 0
    RSI4rsx

RSI4rxH = if RSI4rsx >= NumberOfConfirmationBarsRSI4
    RSI4x = high
    RSI4x
RSI4rxL = if RSI4rsx >= NumberOfConfirmationBarsRSI4
    RSI4y = low
    RSI4y

RSI4rH = fixnan(RSI4rxH)
RSI4rL = fixnan(RSI4rxL)



///////////////////////////////////////////////////////


RSI4rsu = 0


if RSI4incrementer_up
    RSI4rsu := nz(RSI4rsu[1], 0) + RSI4incrementer_up
    RSI4rsu
else
    RSI4rsu = 0
    RSI4rsu


RSI4rssH = if RSI4rsu >= NumberOfConfirmationBarsRSI4
    RSI4x = high
    RSI4x


RSI4rssL = if RSI4rsu >= NumberOfConfirmationBarsRSI4
    RSI4y = low
    RSI4y

RSI4ResistanceZoneHigh = fixnan(RSI4rssH)
RSI4ResistanceZoneLow  = fixnan(RSI4rssL)


////////////////////////////////////////////////////////


RSI4rsd = 0


if RSI4incrementer_down
    RSI4rsd := nz(RSI4rsd[1], 0) + RSI4incrementer_down
    RSI4rsd
else
    RSI4rsd = 0
    RSI4rsd

RSI4rsrH = if RSI4rsd >= NumberOfConfirmationBarsRSI4
    RSI4x = high
    RSI4x

RSI4rsrL = if RSI4rsd >= NumberOfConfirmationBarsRSI4
    RSI4y = low
    RSI4y


RSI4SupportZoneHigh = fixnan(RSI4rsrH)
RSI4SupportZoneLow  = fixnan(RSI4rsrL)


////////////////////////////////////////////////////////

RSI4_ResZoneColor = RSI4ResistanceZoneHigh !=  RSI4ResistanceZoneHigh[1] ?  na : RSI4ResistanceColorIn
RSI4_SupZoneColor = RSI4SupportZoneLow     !=  RSI4SupportZoneLow[1]     ?  na : RSI4SupportColorIn

RSI4SDColor       = RSI4rH != RSI4rH[1]?                                    na : RSI4SDColorIn

////////////////////////////////////////////////////////

RSI4RZHigh = plot(ShowRZ4 ? RSI4ResistanceZoneHigh : na, style=plot.style_cross, title="Resistance Zone - 4 - High", transp=100)
RSI4RZLow  = plot(ShowRZ4 ? RSI4ResistanceZoneLow  : na, style=plot.style_cross, title="Resistance Zone - 4 - Low",  transp=100)
fill(RSI4RZHigh, RSI4RZLow, color=RSI4_ResZoneColor, title="Support Zone - 4 - Fill")

RSI4SZHigh = plot(ShowSZ4 ? RSI4SupportZoneHigh    : na, style=plot.style_cross,    title="Support Zone - 4 - High", transp=100)
RSI4SZLow  = plot(ShowSZ4 ? RSI4SupportZoneLow     : na, style=plot.style_cross,    title="Support Zone - 4 - Low",  transp=100)
fill(RSI4SZHigh, RSI4SZLow, color=RSI4_SupZoneColor, title="Support Zone - 4 - Fill")


PlotRSI4rH = plot(ShowSD4 ? RSI4rH : na,  style=plot.style_cross, linewidth=1, title="Supply Demand - 4 - High")
PlotRSI4rL = plot(ShowSD4 ? RSI4rL : na,  style=plot.style_cross, linewidth=1, title="Supply Demand - 4 - Low")
fill(PlotRSI4rH, PlotRSI4rL, color=RSI4SDColor, title="Supply Demand - 4 - Fill")

////////////////////////////////////////////////////////

PriceInRSI4SDZone     = (close <= RSI4rH) and (close >= RSI4rL) and (RSI4rH == RSI4rH[1])
PriceEntersRSI4SDZone = (PriceInRSI4SDZone and not PriceInRSI4SDZone[1])

alertcondition(PriceEntersRSI4SDZone,   title='Alert - Price Enters S/D Zone 4',    message='Price Enters S/D Zone 4 - RSI S/D')


alertcondition(PriceEntersRSI1SDZone or PriceEntersRSI2SDZone or PriceEntersRSI3SDZone or PriceEntersRSI4SDZone,   title='Alert - Price Enters Any S/D Zone',    message='Price Enters Any S/D Zone - RSI S/D')

